version: 2
jobs:
  server_test:
    docker:
      - image: arthurphilippe/epitech-c-cpp-plain
    steps:
      - checkout
      - run:
          name: Build Project
          command: make
          working_directory: ~/project/server
      - run:
          name: Build Unit Tests Suites
          command: make tests
          working_directory: ~/project/server
      - run:
          name: Tidy up
          command: make clean
          working_directory: ~/project/server
      - run:
          name: Unit Tests Execution
          command: ./unit_tests.out -j 1 --verbose --xml=tests/results.xml --always-succeed
          working_directory: ~/project/server
      - store_test_results:
          path: .
          working_directory: ~/project/server
      - run:
          name: Code Coverage - Processing
          command: ./tests/coverage.sh html
          working_directory: ~/project/server
      - store_artifacts:
          path: ~/project/server/coverage
          destination: coverage

  server_build_clang:
    docker:
      - image: arthurphilippe/clang
    steps:
      - checkout
      - run:
          name: Build Project Using clang
          command: make CXX=clang++
          working_directory: ~/project/server

  client_test:
    docker:
      - image: arthurphilippe/epitech-c-cpp-plain
    steps:
      - checkout
      - run:
          name: Build Project
          command: make
          working_directory: ~/project/client
      - run:
          name: Build Unit Tests Suites
          command: make tests
          working_directory: ~/project/client
      - run:
          name: Tidy up
          command: make clean
          working_directory: ~/project/client
      - run:
          name: Unit Tests Execution
          command: ./unit_tests.out -j 1 --verbose --xml=tests/results.xml --always-succeed
          working_directory: ~/project/client
      - store_test_results:
          path: .
          working_directory: ~/project/client
      - run:
          name: Code Coverage - Processing
          command: ./tests/coverage.sh html
          working_directory: ~/project/client
      - store_artifacts:
          path: ~/project/client/coverage
          destination: coverage

  client_build_clang:
    docker:
      - image: arthurphilippe/clang
    steps:
      - checkout
      - run:
          name: Build Project Using clang
          command: make CXX=clang++
          working_directory: ~/project/client

  pyclient_test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.0

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/project

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyclient/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          working_directory: ~/project/pyclient
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./pyclient/venv
          key: v1-dependencies-{{ checksum "pyclient/requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          working_directory: ~/project/pyclient
          name: run tests
          command: |
            . venv/bin/activate
            python -m pytest --junitxml=test-reports/report.xml

      - store_artifacts:
          path: pyclient/test-reports
          destination: test-reports


workflows:
  version: 2
  commit:
    jobs:
      - server_test
      - server_build_clang
      - client_test
      - client_build_clang
      - pyclient_test
